//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataEntry
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace DataEntry.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The domain context corresponding to the 'DomainService1' domain service.
    /// </summary>
    public sealed partial class DomainService1 : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class.
        /// </summary>
        public DomainService1() : 
                this(new WebDomainClient<IDomainService1Contract>(new Uri("DataEntry-Web-DomainService1.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DomainService1 service URI.</param>
        public DomainService1(Uri serviceUri) : 
                this(new WebDomainClient<IDomainService1Contract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public DomainService1(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Site"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Site> Sites
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Site>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Site"/> entities using the 'GetSites' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Site"/> entities.</returns>
        public EntityQuery<Site> GetSitesQuery()
        {
            this.ValidateMethod("GetSitesQuery", null);
            return base.CreateQuery<Site>("GetSites", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DomainService1EntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DomainService1' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IDomainService1Contract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSites' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetSitesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetSites", ReplyAction="http://tempuri.org/DomainService1/GetSitesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSites(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSites'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSites'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSites' operation.</returns>
            QueryResult<Site> EndGetSites(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/SubmitChanges", ReplyAction="http://tempuri.org/DomainService1/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DomainService1EntityContainer : EntityContainer
        {
            
            public DomainService1EntityContainer()
            {
                this.CreateEntitySet<Site>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'Site' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DataEntry.Web")]
    public sealed partial class Site : Entity
    {
        
        private int _category;
        
        private string _city;
        
        private string _country;
        
        private string _name;
        
        private int _siteID;
        
        private string _states;
        
        private string _url;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryChanging(int value);
        partial void OnCategoryChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSiteIDChanging(int value);
        partial void OnSiteIDChanged();
        partial void OnStatesChanging(string value);
        partial void OnStatesChanged();
        partial void OnURLChanging(string value);
        partial void OnURLChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Site"/> class.
        /// </summary>
        public Site()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Category' value.
        /// </summary>
        [DataMember()]
        public int Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    this.OnCategoryChanging(value);
                    this.RaiseDataMemberChanging("Category");
                    this.ValidateProperty("Category", value);
                    this._category = value;
                    this.RaiseDataMemberChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SiteID
        {
            get
            {
                return this._siteID;
            }
            set
            {
                if ((this._siteID != value))
                {
                    this.OnSiteIDChanging(value);
                    this.ValidateProperty("SiteID", value);
                    this._siteID = value;
                    this.RaisePropertyChanged("SiteID");
                    this.OnSiteIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'States' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string States
        {
            get
            {
                return this._states;
            }
            set
            {
                if ((this._states != value))
                {
                    this.OnStatesChanging(value);
                    this.RaiseDataMemberChanging("States");
                    this.ValidateProperty("States", value);
                    this._states = value;
                    this.RaiseDataMemberChanged("States");
                    this.OnStatesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'URL' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string URL
        {
            get
            {
                return this._url;
            }
            set
            {
                if ((this._url != value))
                {
                    this.OnURLChanging(value);
                    this.RaiseDataMemberChanging("URL");
                    this.ValidateProperty("URL", value);
                    this._url = value;
                    this.RaiseDataMemberChanged("URL");
                    this.OnURLChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._siteID;
        }
    }
}
